---
layout: post
comments: true
title: c++에서의 익명함수
tags: [C++, lambda]
date: 2015-12-28T04:48:10+00:00
---

## What is lambda?
간단하게 람다는 익명 함수이다.
람다에 대해서는 다들 잘 알고 있을테니, 문법에 대해 정리하도록 하자.


## 1. Syntax of lambda
{% highlight cpp %}
1. [ capture-list ] ( params ) mutable(optional) exception attribute -> ret { body }
2. [ capture-list ] ( params ) -> ret { body }
3. [ capture-list ] ( params ) { body }
4. [ capture-list ] { body }
{% endhighlight %}
>1. Full declaration
2. Const lamda : 캡쳐된 object를 수정할 수 없음
3. Omitted trailing-return-type : return statements에 의해 자동 추론
4. Omitted parameter list : function이 argument를 가지지 않는 케이스

아마 주로 3번 형태를 많이 사용하게 될 것이며, capture-list에 대해 간단히 정리하도록 하자
(params는 일반 함수 parameter와 동일하게 기재하면 된다).
정리하기 앞서 lambda의 간단한 사용예제를 보도록 하자.

### 1.1 Example
{% highlight cpp %}
#include <vector>
#include <iostream>
#include <algorithm>
#include <functional>

int main()
{
    std::vector<int> c = {1, 2, 3, 4, 5, 6, 7};
    int x = 5;
    c.erase(std::remove_if(c.begin(), c.end(), [x](int n) { return n < x; }), c.end());

    std::cout << "c: ";
    std::for_each(c.begin(), c.end(), [](int i){ std::cout << i << ' '; });
    std::cout << '\n';
}
{% endhighlight %}

### 1.2 Result
{% highlight cpp %}
c: 5 6 7
{% endhighlight %}
위 예제는 vector에서 입력받은 인자보다 작은 값을 가진 요소들을 vector에서 삭제하는 예제이다.
std::remove_if는 범위에서 조건에 해당되는 값을 삭제하는 함수이다.
조건을 판별하는 인자로 function object or function pointer를 받게되는데, 여기에 lambda를 사용하였다.
(remove_if라는 함수는 처음 보았네;; 자세한 내용은 http://www.cplusplus.com/reference/algorithm/remove_if/ 참조)
이제 본론으로 Post를 쓰게 된 capture-list를 정리하도록 하자.

---

## 2. Capture-list
Capture-list를 사용하면, lambda가 있는 scope 영역의 변수를 원하는 방식으로 캡쳐할 수 있다.
사용할 수 있는 형태로는 아래와 같다.

### 2.1 syntax of capture-list
{% highlight cpp %}
1. identifier
2. identifier ...
3. identifier initializer(C++14)
4. & identifier
5. & identifier ...
6. & identifier initializer(C++14)
7. this
8. &
9. =
{% endhighlight %}

>1. by value
2. by value and pack expansion(가변인자)
3. by value and initializer(초기화 가능)
4. by reference
5. by reference and pack expansion
6. by reference and initializer
7. this copy
8. capture all variable in scope by reference
9. capture all variable in scope by value


정리를 해보자면 by  reference이냐 by value이냐가 가장 중요하며,
부가적으로 pack expansion와 initializer 지원여부이다.
참고적으로 ,를 통해 여러 개의 변수를 가져올 수 있으며 []와 같이 capture를 하지 않을 수도 있다.
(ex. [a, &b])

### 2.2 주의사항
this와 reference의 사용은 잘 주의한 뒤 사용을 해야한다.
reference의 의도치 않은 사용에 대해 알아보자.

{% highlight cpp %}
std::function<void()> make_func()
{
  int x = 10;
  auto f = [x]{ std::cout << x << std::endl; }; //(1)
  //auto f = [&x]{ std::cout << x << std::endl; }; //(2)
  return f;
}

int main()
{
  auto func = make_func();
  func();
}
{% endhighlight %}

위 코드는 lambda를 사용하여 x를 출력하는 간단한 내용이다.  
하지만 2번과 같이  reference를 사용한다면 10이 아닌 gabage 값이 찍힐 것이다.
왜냐하면 x의 scope는 make_func가 끝나는 시점에서 종료되기 때문이다.

마지막으로 ,를 사용하여 여러 개의 변수를 사용하는 예제에서 주의해야 될점을 알아보자
{% highlight cpp %}
struct S2 { void f(int i); };
void S2::f(int i)
{
    [&, i] {}; // ok
    [&, &i] {}; // error: i preceded by & when & is the default
    [=, this] {}; // error: this when = is the default
    [i, i] {}; // error: i repeated
}
{% endhighlight %}

2번째 구문은 &로 이미 모든 variable이 by reference로 capture 됐기 때문에 중복이라 에러
3번째도 =로 모든 variable들이 by value로 capture되어 중복이라 에러
4번째로 동일한 variable을 캡쳐하기에 에러
여기서 중요한 것은 중복해서 capture를 하면 안된다는 점이다.
이러한 점을 유의해서 사용해야 할 것

---

## Reference

<http://en.cppreference.com/w/cpp/language/lambda>

<http://devsw.tistory.com/197>
